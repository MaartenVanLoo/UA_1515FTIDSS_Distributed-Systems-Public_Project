### GET NS status
GET http://localhost:8081/ns/

> {%
    client.test("Get NS status", function() {
        client.assert(response.status === 200, "Response status is not 200\nExpected: 200\nActual: " + response.status + "\n");
        client.assert(response.body.Mapping.length === 5, "Response body does not contain 5 nodes\nExpected: 5\nActual: " + response.body.Mapping.length + "\n");
        client.global.set("nodeCount", response.body.Mapping.length);
        client.log("\nMapping:\n")
        for (var i = 0; i < response.body.Mapping.length; i++) {
           client.log(response.body.Mapping[i].id + ": " + response.body.Mapping[i].ip);
           client.global.set("nodeID" + i, (response.body.Mapping[i].id));
           client.global.set("nodeIP" + i, (response.body.Mapping[i].ip));
        }
    });
%}


### Get Node0 [GET]
GET http://localhost:8081/ns/nodes/{{nodeID0}}

> {%
    client.test("Node 0 validation", function() {
        client.assert(response.status === 200, "Response status is not 200\nExpected: 200\nActual: " + response.status + "\n");
        client.assert(response.body.node.id == client.global.get("nodeID0"), "Response body does not contain node ID\nExpected: " + client.global.get("nodeID0") + "\nActual: " + response.body.node.id + "\n");
        thisNode = client.global.get("nodeID0");
        nodecount =client.global.get("nodeCount");

        prev = -1;
        next = -1;
        for (var i = 0; i < nodecount; i++){
            if (client.global.get("nodeID" + i) === thisNode){
                thisNode = i;
                next = (i + 1);
                prev = (i - 1);
                break;
            }
        }
        if (prev === -1){
            prev = (nodecount - 1);
        }
        if (next == nodecount){
            next = 0;
        }

        client.log("Node: \n" + client.global.get("nodeID" + i));
        client.log("Next: \n" + client.global.get("nodeID" + next)) ;
        client.log("Prev: \n" + client.global.get("nodeID" + prev));
        client.assert(response.body.next.id == client.global.get("nodeID" + next), "Next id is wrong\nExpected: " + client.global.get("nodeID" + next) + "\nActual: " + response.body.next.id + "\n");
        client.assert(response.body.prev.id == client.global.get("nodeID" + prev), "Prev id is wrong\nExpected: " + client.global.get("nodeID" + prev) + "\nActual: " + response.body.prev.id + "\n");
        client.assert(response.body.node.ip == client.global.get("nodeIP"+ thisNode), "Node IP is wrong\nExpected: " + client.global.get("nodeIP" + thisNode) + "\nActual: " + response.body.node.ip + "\n");
        client.assert(response.body.next.ip == client.global.get("nodeIP" + next), "Next IP is wrong\nExpected: " + client.global.get("nodeIP" + next) + "\nActual: " + response.body.next.ip + "\n");
        client.assert(response.body.prev.ip == client.global.get("nodeIP" + prev), "Prev IP is wrong\nExpected: " + client.global.get("nodeIP" + prev) + "\nActual: " + response.body.prev.ip + "\n");
    });
%}
### Get Node1 [GET]
GET http://localhost:8081/ns/nodes/{{nodeID1}}

> {%
    client.test("Node 1 validation", function() {
        client.assert(response.status === 200, "Response status is not 200\nExpected: 200\nActual: " + response.status + "\n");
        client.assert(response.body.node.id == client.global.get("nodeID1"), "Response body does not contain node ID\nExpected: " + client.global.get("nodeID0") + "\nActual: " + response.body.node.id + "\n");
        thisNode = client.global.get("nodeID1");
        nodecount =client.global.get("nodeCount");

        prev = -1;
        next = -1;
        for (var i = 0; i < nodecount; i++){
            if (client.global.get("nodeID" + i) === thisNode){
                thisNode = i;
                next = (i + 1);
                prev = (i - 1);
                break;
            }
        }
        if (prev === -1){
            prev = (nodecount - 1);
        }
        if (next == nodecount){
            next = 0;
        }

        client.log("Node: \n" + client.global.get("nodeID" + i));
        client.log("Next: \n" + client.global.get("nodeID" + next)) ;
        client.log("Prev: \n" + client.global.get("nodeID" + prev));
        client.assert(response.body.next.id == client.global.get("nodeID" + next), "Next id is wrong\nExpected: " + client.global.get("nodeID" + next) + "\nActual: " + response.body.next.id + "\n");
        client.assert(response.body.prev.id == client.global.get("nodeID" + prev), "Prev id is wrong\nExpected: " + client.global.get("nodeID" + prev) + "\nActual: " + response.body.prev.id + "\n");
        client.assert(response.body.node.ip == client.global.get("nodeIP"+ thisNode), "Node IP is wrong\nExpected: " + client.global.get("nodeIP" + thisNode) + "\nActual: " + response.body.node.ip + "\n");
        client.assert(response.body.next.ip == client.global.get("nodeIP" + next), "Next IP is wrong\nExpected: " + client.global.get("nodeIP" + next) + "\nActual: " + response.body.next.ip + "\n");
        client.assert(response.body.prev.ip == client.global.get("nodeIP" + prev), "Prev IP is wrong\nExpected: " + client.global.get("nodeIP" + prev) + "\nActual: " + response.body.prev.ip + "\n");
    });
%}
### Get Node2 [GET]
GET http://localhost:8081/ns/nodes/{{nodeID2}}

> {%
    client.test("Node 2 validation", function() {
        client.assert(response.status === 200, "Response status is not 200\nExpected: 200\nActual: " + response.status + "\n");
        client.assert(response.body.node.id == client.global.get("nodeID2"), "Response body does not contain node ID\nExpected: " + client.global.get("nodeID0") + "\nActual: " + response.body.node.id + "\n");
        thisNode = client.global.get("nodeID2");
        nodecount =client.global.get("nodeCount");

        prev = -1;
        next = -1;
        for (var i = 0; i < nodecount; i++){
            if (client.global.get("nodeID" + i) === thisNode){
                thisNode = i;
                next = (i + 1);
                prev = (i - 1);
                break;
            }
        }
        if (prev === -1){
            prev = (nodecount - 1);
        }
        if (next == nodecount){
            next = 0;
        }

        client.log("Node: \n" + client.global.get("nodeID" + i));
        client.log("Next: \n" + client.global.get("nodeID" + next)) ;
        client.log("Prev: \n" + client.global.get("nodeID" + prev));
        client.assert(response.body.next.id == client.global.get("nodeID" + next), "Next id is wrong\nExpected: " + client.global.get("nodeID" + next) + "\nActual: " + response.body.next.id + "\n");
        client.assert(response.body.prev.id == client.global.get("nodeID" + prev), "Prev id is wrong\nExpected: " + client.global.get("nodeID" + prev) + "\nActual: " + response.body.prev.id + "\n");
        client.assert(response.body.node.ip == client.global.get("nodeIP"+ thisNode), "Node IP is wrong\nExpected: " + client.global.get("nodeIP" + thisNode) + "\nActual: " + response.body.node.ip + "\n");
        client.assert(response.body.next.ip == client.global.get("nodeIP" + next), "Next IP is wrong\nExpected: " + client.global.get("nodeIP" + next) + "\nActual: " + response.body.next.ip + "\n");
        client.assert(response.body.prev.ip == client.global.get("nodeIP" + prev), "Prev IP is wrong\nExpected: " + client.global.get("nodeIP" + prev) + "\nActual: " + response.body.prev.ip + "\n");
    });
%}
### Get Node3 [GET]
GET http://localhost:8081/ns/nodes/{{nodeID3}}

> {%
    client.test("Node 3 validation", function() {
        client.assert(response.status === 200, "Response status is not 200\nExpected: 200\nActual: " + response.status + "\n");
        client.assert(response.body.node.id == client.global.get("nodeID3"), "Response body does not contain node ID\nExpected: " + client.global.get("nodeID0") + "\nActual: " + response.body.node.id + "\n");
        thisNode = client.global.get("nodeID3");
        nodecount =client.global.get("nodeCount");

        prev = -1;
        next = -1;
        for (var i = 0; i < nodecount; i++){
            if (client.global.get("nodeID" + i) === thisNode){
                thisNode = i;
                next = (i + 1);
                prev = (i - 1);
                break;
            }
        }
        if (prev === -1){
            prev = (nodecount - 1);
        }
        if (next == nodecount){
            next = 0;
        }

        client.log("Node: \n" + client.global.get("nodeID" + i));
        client.log("Next: \n" + client.global.get("nodeID" + next)) ;
        client.log("Prev: \n" + client.global.get("nodeID" + prev));
        client.assert(response.body.next.id == client.global.get("nodeID" + next), "Next id is wrong\nExpected: " + client.global.get("nodeID" + next) + "\nActual: " + response.body.next.id + "\n");
        client.assert(response.body.prev.id == client.global.get("nodeID" + prev), "Prev id is wrong\nExpected: " + client.global.get("nodeID" + prev) + "\nActual: " + response.body.prev.id + "\n");
        client.assert(response.body.node.ip == client.global.get("nodeIP"+ thisNode), "Node IP is wrong\nExpected: " + client.global.get("nodeIP" + thisNode) + "\nActual: " + response.body.node.ip + "\n");
        client.assert(response.body.next.ip == client.global.get("nodeIP" + next), "Next IP is wrong\nExpected: " + client.global.get("nodeIP" + next) + "\nActual: " + response.body.next.ip + "\n");
        client.assert(response.body.prev.ip == client.global.get("nodeIP" + prev), "Prev IP is wrong\nExpected: " + client.global.get("nodeIP" + prev) + "\nActual: " + response.body.prev.ip + "\n");
    });
%}
### Get Node4 [GET]
GET http://localhost:8081/ns/nodes/{{nodeID4}}

> {%
    client.test("Node 4 validation", function() {
        client.assert(response.status === 200, "Response status is not 200\nExpected: 200\nActual: " + response.status + "\n");
        client.assert(response.body.node.id == client.global.get("nodeID4"), "Response body does not contain node ID\nExpected: " + client.global.get("nodeID0") + "\nActual: " + response.body.node.id + "\n");
        thisNode = client.global.get("nodeID4");
        nodecount =client.global.get("nodeCount");

        prev = -1;
        next = -1;
        for (var i = 0; i < nodecount; i++){
            if (client.global.get("nodeID" + i) === thisNode){
                thisNode = i;
                next = (i + 1);
                prev = (i - 1);
                break;
            }
        }
        if (prev === -1){
            prev = (nodecount - 1);
        }
        if (next == nodecount){
            next = 0;
        }

        client.log("Node: \n" + client.global.get("nodeID" + i));
        client.log("Next: \n" + client.global.get("nodeID" + next)) ;
        client.log("Prev: \n" + client.global.get("nodeID" + prev));
        client.assert(response.body.next.id == client.global.get("nodeID" + next), "Next id is wrong\nExpected: " + client.global.get("nodeID" + next) + "\nActual: " + response.body.next.id + "\n");
        client.assert(response.body.prev.id == client.global.get("nodeID" + prev), "Prev id is wrong\nExpected: " + client.global.get("nodeID" + prev) + "\nActual: " + response.body.prev.id + "\n");
        client.assert(response.body.node.ip == client.global.get("nodeIP"+ thisNode), "Node IP is wrong\nExpected: " + client.global.get("nodeIP" + thisNode) + "\nActual: " + response.body.node.ip + "\n");
        client.assert(response.body.next.ip == client.global.get("nodeIP" + next), "Next IP is wrong\nExpected: " + client.global.get("nodeIP" + next) + "\nActual: " + response.body.next.ip + "\n");
        client.assert(response.body.prev.ip == client.global.get("nodeIP" + prev), "Prev IP is wrong\nExpected: " + client.global.get("nodeIP" + prev) + "\nActual: " + response.body.prev.ip + "\n");
    });
%}

###
DELETE http://localhost:8081/ns/nodes/1

